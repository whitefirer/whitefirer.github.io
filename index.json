[{"categories":["hugo"],"content":"Asciinema-Player是一款著名的的终端录制播放器，可用于播放asciinema录制的播放文件，经常被用来进行终端操作演示。这里也将其引入到了当前Hugo博客中使用，下面我将讲讲引入的过程。 ","date":"2022-08-28","objectID":"/posts/2022/08/28/hugo-asciinema-player/:0:0","tags":["hugo","tech","asciinema"],"title":"如何在Hugo中使用终端播放器Asciinema-Player","uri":"/posts/2022/08/28/hugo-asciinema-player/"},{"categories":["hugo"],"content":"1.效果展示 Talk is cheap, show the result ~ 这里直接借用官方demo进行展示。 ","date":"2022-08-28","objectID":"/posts/2022/08/28/hugo-asciinema-player/:0:1","tags":["hugo","tech","asciinema"],"title":"如何在Hugo中使用终端播放器Asciinema-Player","uri":"/posts/2022/08/28/hugo-asciinema-player/"},{"categories":["hugo"],"content":"2.需求分析 为什么需要在Hugo里面使用终端播放器Asciinema-Player呢？ 作为技术人员，在写博客时总是需要进行一些终端操作演示，而演示方式无非以下几种： 方式 优点 缺点 视频 能配音配特效 网站流量消耗大，不能复制 动图 文件相对小些 不能控制进度，不能复制 代码 占用流量小，能复制 不能控制进度，也不太好展示效果 而终端录制播放器Asciinema-Player则兼容体积小、能控制、能复制于一体并能完美复现终端操作场景，非常适合用于在博客中进行一些终端操作演示。 ","date":"2022-08-28","objectID":"/posts/2022/08/28/hugo-asciinema-player/:0:2","tags":["hugo","tech","asciinema"],"title":"如何在Hugo中使用终端播放器Asciinema-Player","uri":"/posts/2022/08/28/hugo-asciinema-player/"},{"categories":["hugo"],"content":"3.解决方案 首先，在网上找下前人在Hugo博客里扩展嵌入asciinema-player的方法，比如 Embedding asciinema cast in your Hugo site。 shortcode 可以找到里面asciinema-player的shortcode代码如下： \u003cp\u003e \u003casciinema-player src=\"/casts/{{ with .Get \"key\" }}{{ . }}{{ end }}.cast\" cols=\"{{ if .Get \"cols\" }}{{ .Get \"cols\" }}{{ else }}640{{ end }}\" rows=\"{{ if .Get \"rows\" }}{{ .Get \"rows\" }}{{ else }}10{{ end }}\" {{ if .Get \"autoplay\" }}autoplay=\"{{ .Get \"autoplay\" }}\"{{ end }} {{ if .Get \"preload\" }}preload=\"{{ .Get \"preload\" }}\"{{ end }} {{ if .Get \"loop\" }}loop=\"{{ .Get \"loop\" }}\"{{ end }} start-at=\"{{ if .Get \"start-at\" }}{{ .Get \"start-at\" }}{{ else }}0{{ end }}\" speed=\"{{ if .Get \"speed\" }}{{ .Get \"speed\" }}{{ else }}1{{ end }}\" {{ if .Get \"idle-time-limit\" }}idle-time-limit=\"{{ .Get \"idle-time-limit\" }}\"{{ end }} {{ if .Get \"poster\" }}poster=\"{{ .Get \"poster\" }}\"{{ end }} {{ if .Get \"font-size\" }}font-size=\"{{ .Get \"font-size\" }}\"{{ end }} {{ if .Get \"theme\" }}theme=\"{{ .Get \"theme\" }}\"{{ end }} {{ if .Get \"title\" }}title=\"{{ .Get \"title\" }}\"{{ end }} {{ if .Get \"author\" }}author=\"{{ .Get \"author\" }}\"{{ end }} {{ if .Get \"author-url\" }}author-url=\"{{ .Get \"author-url\" }}\"{{ end }} {{ if .Get \"author-img-url\" }}author-img-url=\"{{ .Get \"author-img-url\" }}\"{{ end }} \u003e\u003c/asciinema-player\u003e \u003c/p\u003e 细细口味了下这段代码，结合自己需求进行了修改： Talk is cheap, show me the code ~ # themes/iLoveIt/layouts/shortcodes/asciinema.html \u003cp\u003e \u003casciinema-player {{- with .Get \"src\" }} src=\"{{ . }}\" {{ end -}} {{- with .Get \"key\" }} src=\"/casts/{{ . }}.cast\"{{ end -}} cols=\"{{ if .Get \"cols\" }}{{ .Get \"cols\" }}{{ else }}640{{ end }}\" rows=\"{{ if .Get \"rows\" }}{{ .Get \"rows\" }}{{ else }}10{{ end }}\" {{- with .Get \"autoplay\" }}autoplay=\"{{ . }}\"{{ end -}} {{- with .Get \"preload\" }}preload=\"{{ . }}\"{{ end -}} {{- with .Get \"loop\" }}loop=\"{{ . }}\"{{ end -}} start-at=\"{{ if .Get \"start-at\" }}{{ .Get \"start-at\" }}{{ else }}0{{ end }}\" speed=\"{{ if .Get \"speed\" }}{{ .Get \"speed\" }}{{ else }}1{{ end }}\" {{- with .Get \"idle-time-limit\" }}idle-time-limit=\"{{ . }}\"{{ end -}} {{- with .Get \"poster\" }} poster=\"{{ . | safeURL }}\"{{ end -}} {{- with .Get \"font-size\" }}font-size=\"{{ . }}\"{{ end -}} {{- with .Get \"theme\" }}theme=\"{{ . }}\"{{ end -}} {{- with .Get \"title\" }}title=\"{{ . }}\"{{ end -}} {{- with .Get \"author\" }}author=\"{{ . }}\"{{ end -}} {{- with .Get \"author-url\" }}author-url=\"{{ . }}\"{{ end }} {{- with .Get \"author-img-url\" }}author-img-url=\"{{ . }}\"{{ end -}} fit=\"{{ if .Get \"fit\" }}{{ .Get \"fit\" }}{{ else }}width{{ end }}\" \u003e\u003c/asciinema-player\u003e \u003c/p\u003e 注意看高亮部分，主要修改了以下几点： 修改点 if .Get 形式代码过于累赘，这里把不需要取默认值的语句统统改成了with .Get形式； 只有固定的key方法从本站获取.cast录制文件，这里扩展了src以便从站外获取录制文件地址； poster这里会得到一个奇怪的数据#ZgotmplZ，它是一个安全防护的默认数据，见官方说明，会导致设置指定时间封面无效，解决起来也简单，加上| safeURL管道方法就可解决； js、css 参考方案里动态引入js和css是靠在要用到的文章里设置asciinema为true： {{ if .Params.asciinema }} \u003cscript src=\"{{ .Site.BaseURL }}js/asciinema-player.js\"\u003e\u003c/script\u003e {{ end }} --- title: Kubernetes Backup - ARK description: Kubernetes backup process using ark asciinema: true tags: - kubernetes - backup --- 这里我想了下完全可以参考mermaid接入的方式，直接判断有没有渲染指定元素来达到动态加载js、css等资源的目的： # themes/iLoveIt/layouts/partials/assets.html {{- /* asciinema */ -}} {{- if (.Scratch.Get \"this\").asciinema | or $params.draft -}} {{- $source := $cdn.asciinemaJS | default \"lib/asciinema/asciinema-player.min.js\" -}} {{- dict \"Source\" $source \"Fingerprint\" $fingerprint | dict \"Scratch\" .Scratch \"Data\" | partial \"scratch/script.html\" -}} {{- end -}} 其中$params.draft是为了开发模式下也能设置草稿参数进行预览，同时设置下cdn: # themes/iLoveIt/assets/data/cdn/jsdelivr.yml gitalkJS: gitalk@1.7.2/dist/gitalk.min.js # valine@1.5.0 https://valine.js.org/ valineJS: valine@1.5.0/dist/Valine.min.js asciinemaJS: asciinema-player@3.0.1/dist/index.min.js # cookieconsent@3.1.1 https://github.com/osano/cookieconsent cookieconsentCSS: cookieconsent@3.1.1/build/cookieconsent.min.css cookieconsentJS: cookieconsent@3.1.1/build/cookieconsent.min.js 调整下css样式，让播放器能够在超出显示区域时滚动过去： /* themes/iLoveIt/assets/lib/asciinema/asciinema-player.min.css */ .asciinema-terminal { box-sizing: content-box; -","date":"2022-08-28","objectID":"/posts/2022/08/28/hugo-asciinema-player/:0:3","tags":["hugo","tech","asciinema"],"title":"如何在Hugo中使用终端播放器Asciinema-Player","uri":"/posts/2022/08/28/hugo-asciinema-player/"},{"categories":["hugo"],"content":"4.使用方法 asciinema-player 只需简单在文章中加入以下代码即可： 其中，cols、rows分别为行列，preload则是要不要预加载，poster则是封面，有data模式也有npt模式，npt即按时间截取封面，上面的就是截取55秒时的终端作为封面。 另外还有speed：播放速度，autoplay：自动播放等参数，具体可参考asciinema-player设置 呈现效果如下（借用了helix-editor的演示，文件大些可能加载慢些）： 点击播放按钮播放，可拖动进度条或者使用方向键控制播放进度。 asciinema 上述终端播放所使用的cast文件，都是使用asciinema在终端录制的。 安装 brew install asciinema 使用 ➜ ~ asciinema --help usage: asciinema [-h] [--version] {rec,play,cat,upload,auth} ... Record and share your terminal sessions, the right way. positional arguments: {rec,play,cat,upload,auth} rec Record terminal session play Replay terminal session cat Print full output of terminal session upload Upload locally saved terminal session to asciinema.org auth Manage recordings on asciinema.org account options: -h, --help show this help message and exit --version show program's version number and exit example usage: Record terminal and upload it to asciinema.org: asciinema rec Record terminal to local file: asciinema rec demo.cast Record terminal and upload it to asciinema.org, specifying title: asciinema rec -t \"My git tutorial\" Record terminal to local file, limiting idle time to max 2.5 sec: asciinema rec -i 2.5 demo.cast Replay terminal recording from local file: asciinema play demo.cast Replay terminal recording hosted on asciinema.org: asciinema play https://asciinema.org/a/difqlgx86ym6emrmd8u62yqu8 Print full output of recorded session: asciinema cat demo.cast For help on a specific command run: asciinema \u003ccommand\u003e -h 另外如果想将其转化为gif动图，也可以使用asciicast2gif。 ","date":"2022-08-28","objectID":"/posts/2022/08/28/hugo-asciinema-player/:0:4","tags":["hugo","tech","asciinema"],"title":"如何在Hugo中使用终端播放器Asciinema-Player","uri":"/posts/2022/08/28/hugo-asciinema-player/"},{"categories":["hugo"],"content":"5.总结 通过以上实践，虽然过程有些曲折，但最终还是顺利地将asciinema-player终端播放器引入到了hugo中使用，后续发布的博客也将经常见到其身影。 ","date":"2022-08-28","objectID":"/posts/2022/08/28/hugo-asciinema-player/:0:5","tags":["hugo","tech","asciinema"],"title":"如何在Hugo中使用终端播放器Asciinema-Player","uri":"/posts/2022/08/28/hugo-asciinema-player/"},{"categories":null,"content":"个人简介 姓名：王诚强 昵称：whitefirer、mortywang、strcat、一只流浪猫 🔭 我正在 腾讯 工作，研究并开发基础架构、云原生、服务网格，同时是Aeraki-Mesh的Maitainer； 🌱 我正在努力学习以成为优秀的 云原生开发者、 基础架构工程师、 架构师、技术管理者； 👯 我热衷为伟大的项目积极做出贡献，或者说想创造伟大的项目； 💬 可以与我一起探讨 云原生 、 架构设计、乃至一切 有趣的技术 😄； ⚡ 显而易见: 我是一名 GEEK； 联系方式：发邮件给我 或者以下方式↓ ","date":"2022-08-21","objectID":"/about/:0:1","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"演讲和讲义 OpenTalk演讲：荔枝微课基础架构的演进与实践 腾讯云云原生大会：荔枝微课基于 Kubernetes 搭建分布式压测系统 IstioCon 2022分享: Istio + Aeraki 在腾讯音乐的服务网格落地 ","date":"2022-08-21","objectID":"/about/:0:2","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"荣誉 🏆 2020年荣获荔枝微课S级贡献员工称号（公司级最高荣誉） 🏆 2022年腾讯新代码文化团队金奖（集团公司级，Aeraki Mesh Team） 🥇 2022年腾讯新代码文化个人奖（集团公司级，每团队一名额，Aeraki Mesh Maintainer） ","date":"2022-08-21","objectID":"/about/:0:3","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"自我评价 十年从业经验，阅历丰富，有着创业经历，从0到1实现了云原生和基础架构改造，也从0到1搭建过团队，并富有创造力，能够从全局出发考虑问题，抓住稳定和高效的重点，并实际推进落地，具有Geek精神，对新技术保持学习热情，关注CNCF社区的发展，热衷于开源事业，学习并参与开源项目的开发，不断在与他人的交流中获得灵感共同进步。 编程语言 开发框架 数据库\u0026组件 常用工具 休闲平台 操作系统 ","date":"2022-08-21","objectID":"/about/:0:4","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"微信扫码 ","date":"2022-08-21","objectID":"/about/:0:5","tags":null,"title":"关于我","uri":"/about/"}]